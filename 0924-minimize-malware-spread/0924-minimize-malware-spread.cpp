class Solution {
public:
    
    int findPar(int x, vector<int> &par){
        // if(par[x]!=x){
        //     return findPar(par[x],par);
        // }
        // return x;
        if(par[x]==x) return x;
        
        return par[x] = findPar(par[x],par);
        
    }
    
    void merge(int p1,int p2,vector<int> &size,vector<int> &par){
        if(size[p1]>size[p2]){
            par[p2]=p1;
            size[p1]+=size[p2];
        } else {
            par[p1]=p2;
            size[p2]+=size[p1];
        }
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        
        vector<int> parent(n);  
        vector<int> size(n,0);
        
        for(int i=0;i<n;i++){
            parent[i] = i;
            size[i] = 1;
            
        }
        
        for(int i=0;i<n;i++){
            
            for(int j=0;j<n;j++){
                
                if(graph[i][j]==1){ // if there is a edge
                    
                    int p1 = findPar(i,parent); //find parent of i
                    int p2 = findPar(j,parent); //find parent of j
                    
                    if(p1!=p2){ // p1 and p2 does not belong to same group merege them
                        
                        merge(p1,p2,size,parent);
                    }
                }
            }
        }
        
        vector<int> infected(n);
        
        for(int e:initial){
            
            int p = findPar(e,parent);
            cout<<"running"<<endl;
            infected[p]++;
        }
        
        int ans = -1;
        int maxSize = -1;
        
        for(auto e:initial){
            
            int p = findPar(e,parent);
            
            if(infected[p]==1 && size[p]>=maxSize){
                if(maxSize==size[p]){
                    ans = min(ans,e);
                } else {
                    ans = e;
                }
                
                maxSize = size[p];
            }
        }
        
        
        if(ans == -1){
            int mini = n+1;
        
            for(int e:initial){
                mini = min(mini,e);
            }
            return mini;
        }
        
        return ans;
        
    }
};